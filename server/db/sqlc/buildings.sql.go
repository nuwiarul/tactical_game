// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: buildings.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createBuilding = `-- name: CreateBuilding :one
INSERT INTO buildings (name, operasi_id, skenario_id, keterangan, color, geom, height)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, operasi_id, skenario_id, name, keterangan, color, geom, height, created_at, updated_at
`

type CreateBuildingParams struct {
	Name       pgtype.Text `json:"name"`
	OperasiID  pgtype.UUID `json:"operasi_id"`
	SkenarioID pgtype.UUID `json:"skenario_id"`
	Keterangan pgtype.Text `json:"keterangan"`
	Color      pgtype.Text `json:"color"`
	Geom       pgtype.Text `json:"geom"`
	Height     pgtype.Int4 `json:"height"`
}

func (q *Queries) CreateBuilding(ctx context.Context, arg CreateBuildingParams) (Building, error) {
	row := q.db.QueryRow(ctx, createBuilding,
		arg.Name,
		arg.OperasiID,
		arg.SkenarioID,
		arg.Keterangan,
		arg.Color,
		arg.Geom,
		arg.Height,
	)
	var i Building
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.Name,
		&i.Keterangan,
		&i.Color,
		&i.Geom,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBuilding = `-- name: DeleteBuilding :exec
DELETE FROM buildings
WHERE id=$1
`

func (q *Queries) DeleteBuilding(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBuilding, id)
	return err
}

const listBuildingsBySkenario = `-- name: ListBuildingsBySkenario :many
SELECT
    id, name, operasi_id, skenario_id, keterangan, color, geom, height,  created_at, updated_at
FROM
    buildings
WHERE skenario_id = $1
ORDER BY created_at DESC
`

type ListBuildingsBySkenarioRow struct {
	ID         uuid.UUID        `json:"id"`
	Name       pgtype.Text      `json:"name"`
	OperasiID  pgtype.UUID      `json:"operasi_id"`
	SkenarioID pgtype.UUID      `json:"skenario_id"`
	Keterangan pgtype.Text      `json:"keterangan"`
	Color      pgtype.Text      `json:"color"`
	Geom       pgtype.Text      `json:"geom"`
	Height     pgtype.Int4      `json:"height"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) ListBuildingsBySkenario(ctx context.Context, skenarioID pgtype.UUID) ([]ListBuildingsBySkenarioRow, error) {
	rows, err := q.db.Query(ctx, listBuildingsBySkenario, skenarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListBuildingsBySkenarioRow{}
	for rows.Next() {
		var i ListBuildingsBySkenarioRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OperasiID,
			&i.SkenarioID,
			&i.Keterangan,
			&i.Color,
			&i.Geom,
			&i.Height,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBuilding = `-- name: UpdateBuilding :one
UPDATE buildings
SET
    name = $1,
    keterangan = $2,
    color = $3,
    height = $4,
    updated_at = NOW()
WHERE
    id = $5
RETURNING id, operasi_id, skenario_id, name, keterangan, color, geom, height, created_at, updated_at
`

type UpdateBuildingParams struct {
	Name       pgtype.Text `json:"name"`
	Keterangan pgtype.Text `json:"keterangan"`
	Color      pgtype.Text `json:"color"`
	Height     pgtype.Int4 `json:"height"`
	ID         uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateBuilding(ctx context.Context, arg UpdateBuildingParams) (Building, error) {
	row := q.db.QueryRow(ctx, updateBuilding,
		arg.Name,
		arg.Keterangan,
		arg.Color,
		arg.Height,
		arg.ID,
	)
	var i Building
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.Name,
		&i.Keterangan,
		&i.Color,
		&i.Geom,
		&i.Height,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
