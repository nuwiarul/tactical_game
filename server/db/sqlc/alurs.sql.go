// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: alurs.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAlur = `-- name: CreateAlur :one
INSERT INTO alurs (operasi_id, skenario_id, alur)
VALUES ($1, $2, $3)
RETURNING id, operasi_id, skenario_id, alur, created_at, updated_at
`

type CreateAlurParams struct {
	OperasiID  pgtype.UUID `json:"operasi_id"`
	SkenarioID pgtype.UUID `json:"skenario_id"`
	Alur       pgtype.Text `json:"alur"`
}

func (q *Queries) CreateAlur(ctx context.Context, arg CreateAlurParams) (Alur, error) {
	row := q.db.QueryRow(ctx, createAlur, arg.OperasiID, arg.SkenarioID, arg.Alur)
	var i Alur
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.Alur,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAlur = `-- name: DeleteAlur :exec
DELETE FROM alurs
WHERE id=$1
`

func (q *Queries) DeleteAlur(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAlur, id)
	return err
}

const listAlursBySkenario = `-- name: ListAlursBySkenario :many
SELECT
    id, operasi_id, skenario_id, alur,  created_at, updated_at
FROM
    alurs
WHERE skenario_id = $1
ORDER BY created_at ASC
`

func (q *Queries) ListAlursBySkenario(ctx context.Context, skenarioID pgtype.UUID) ([]Alur, error) {
	rows, err := q.db.Query(ctx, listAlursBySkenario, skenarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Alur{}
	for rows.Next() {
		var i Alur
		if err := rows.Scan(
			&i.ID,
			&i.OperasiID,
			&i.SkenarioID,
			&i.Alur,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAlur = `-- name: UpdateAlur :one
UPDATE alurs
SET
    alur = $1,
    updated_at = NOW()
WHERE
    id = $2
RETURNING id, operasi_id, skenario_id, alur, created_at, updated_at
`

type UpdateAlurParams struct {
	Alur pgtype.Text `json:"alur"`
	ID   uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateAlur(ctx context.Context, arg UpdateAlurParams) (Alur, error) {
	row := q.db.QueryRow(ctx, updateAlur, arg.Alur, arg.ID)
	var i Alur
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.Alur,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
