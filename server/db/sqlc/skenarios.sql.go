// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: skenarios.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSkenario = `-- name: CreateSkenario :one
INSERT INTO skenarios (name, operasi_id, center_x, center_y, zoom, max_zoom, pitch)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, operasi_id, name, center_x, center_y, zoom, max_zoom, pitch, created_at, updated_at
`

type CreateSkenarioParams struct {
	Name      pgtype.Text   `json:"name"`
	OperasiID pgtype.UUID   `json:"operasi_id"`
	CenterX   pgtype.Float8 `json:"center_x"`
	CenterY   pgtype.Float8 `json:"center_y"`
	Zoom      pgtype.Float8 `json:"zoom"`
	MaxZoom   pgtype.Float8 `json:"max_zoom"`
	Pitch     pgtype.Float8 `json:"pitch"`
}

func (q *Queries) CreateSkenario(ctx context.Context, arg CreateSkenarioParams) (Skenario, error) {
	row := q.db.QueryRow(ctx, createSkenario,
		arg.Name,
		arg.OperasiID,
		arg.CenterX,
		arg.CenterY,
		arg.Zoom,
		arg.MaxZoom,
		arg.Pitch,
	)
	var i Skenario
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.Name,
		&i.CenterX,
		&i.CenterY,
		&i.Zoom,
		&i.MaxZoom,
		&i.Pitch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSkenarios = `-- name: DeleteSkenarios :exec
DELETE FROM skenarios
WHERE id=$1
`

func (q *Queries) DeleteSkenarios(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSkenarios, id)
	return err
}

const getSkenarios = `-- name: GetSkenarios :one
SELECT
    id, name, operasi_id, center_x, center_y, zoom, max_zoom, pitch, created_at, updated_at
FROM
    skenarios
WHERE id=$1
LIMIT 1
`

type GetSkenariosRow struct {
	ID        uuid.UUID        `json:"id"`
	Name      pgtype.Text      `json:"name"`
	OperasiID pgtype.UUID      `json:"operasi_id"`
	CenterX   pgtype.Float8    `json:"center_x"`
	CenterY   pgtype.Float8    `json:"center_y"`
	Zoom      pgtype.Float8    `json:"zoom"`
	MaxZoom   pgtype.Float8    `json:"max_zoom"`
	Pitch     pgtype.Float8    `json:"pitch"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetSkenarios(ctx context.Context, id uuid.UUID) (GetSkenariosRow, error) {
	row := q.db.QueryRow(ctx, getSkenarios, id)
	var i GetSkenariosRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OperasiID,
		&i.CenterX,
		&i.CenterY,
		&i.Zoom,
		&i.MaxZoom,
		&i.Pitch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSkenariosByOperasi = `-- name: ListSkenariosByOperasi :many
SELECT
    id, name, operasi_id, center_x, center_y, zoom, max_zoom, pitch, created_at, updated_at
FROM
    skenarios
WHERE operasi_id = $1
ORDER BY created_at ASC
`

type ListSkenariosByOperasiRow struct {
	ID        uuid.UUID        `json:"id"`
	Name      pgtype.Text      `json:"name"`
	OperasiID pgtype.UUID      `json:"operasi_id"`
	CenterX   pgtype.Float8    `json:"center_x"`
	CenterY   pgtype.Float8    `json:"center_y"`
	Zoom      pgtype.Float8    `json:"zoom"`
	MaxZoom   pgtype.Float8    `json:"max_zoom"`
	Pitch     pgtype.Float8    `json:"pitch"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) ListSkenariosByOperasi(ctx context.Context, operasiID pgtype.UUID) ([]ListSkenariosByOperasiRow, error) {
	rows, err := q.db.Query(ctx, listSkenariosByOperasi, operasiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSkenariosByOperasiRow{}
	for rows.Next() {
		var i ListSkenariosByOperasiRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OperasiID,
			&i.CenterX,
			&i.CenterY,
			&i.Zoom,
			&i.MaxZoom,
			&i.Pitch,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkenario = `-- name: UpdateSkenario :one
UPDATE skenarios
SET
    center_x = $1,
    center_y = $2,
    zoom = $3,
    pitch = $4,
    updated_at = NOW()
WHERE
    id = $5
RETURNING id, operasi_id, name, center_x, center_y, zoom, max_zoom, pitch, created_at, updated_at
`

type UpdateSkenarioParams struct {
	CenterX pgtype.Float8 `json:"center_x"`
	CenterY pgtype.Float8 `json:"center_y"`
	Zoom    pgtype.Float8 `json:"zoom"`
	Pitch   pgtype.Float8 `json:"pitch"`
	ID      uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateSkenario(ctx context.Context, arg UpdateSkenarioParams) (Skenario, error) {
	row := q.db.QueryRow(ctx, updateSkenario,
		arg.CenterX,
		arg.CenterY,
		arg.Zoom,
		arg.Pitch,
		arg.ID,
	)
	var i Skenario
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.Name,
		&i.CenterX,
		&i.CenterY,
		&i.Zoom,
		&i.MaxZoom,
		&i.Pitch,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
