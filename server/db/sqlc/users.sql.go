// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, username, password, role, profile_img)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, username, password, role, unit_id, profile_img, created_at, updated_at
`

type CreateUserParams struct {
	Name       pgtype.Text `json:"name"`
	Username   pgtype.Text `json:"username"`
	Password   pgtype.Text `json:"password"`
	Role       pgtype.Text `json:"role"`
	ProfileImg pgtype.Text `json:"profile_img"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Username,
		arg.Password,
		arg.Role,
		arg.ProfileImg,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.UnitID,
		&i.ProfileImg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const selectUsers = `-- name: SelectUsers :one
SELECT
    id, name, username, password, role, profile_img, created_at, updated_at
FROM
    users
WHERE username=$1
LIMIT 1
`

type SelectUsersRow struct {
	ID         uuid.UUID        `json:"id"`
	Name       pgtype.Text      `json:"name"`
	Username   pgtype.Text      `json:"username"`
	Password   pgtype.Text      `json:"password"`
	Role       pgtype.Text      `json:"role"`
	ProfileImg pgtype.Text      `json:"profile_img"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) SelectUsers(ctx context.Context, username pgtype.Text) (SelectUsersRow, error) {
	row := q.db.QueryRow(ctx, selectUsers, username)
	var i SelectUsersRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.ProfileImg,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
