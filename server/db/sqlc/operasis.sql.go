// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: operasis.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countOperasis = `-- name: CountOperasis :one
SELECT count(*)
FROM operasis
LIMIT 1
`

func (q *Queries) CountOperasis(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countOperasis)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSearchOperasis = `-- name: CountSearchOperasis :one
SELECT count(*)
FROM operasis
WHERE name ILIKE '%' || $1::text || '%'
LIMIT 1
`

func (q *Queries) CountSearchOperasis(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, countSearchOperasis, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOperasi = `-- name: CreateOperasi :one
INSERT INTO operasis (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateOperasi(ctx context.Context, name pgtype.Text) (Operasi, error) {
	row := q.db.QueryRow(ctx, createOperasi, name)
	var i Operasi
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOperasis = `-- name: DeleteOperasis :exec
DELETE FROM operasis
WHERE id=$1
`

func (q *Queries) DeleteOperasis(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOperasis, id)
	return err
}

const getOperasis = `-- name: GetOperasis :one
SELECT
    id, name, created_at, updated_at
FROM
    operasis
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetOperasis(ctx context.Context, id uuid.UUID) (Operasi, error) {
	row := q.db.QueryRow(ctx, getOperasis, id)
	var i Operasi
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOperasis = `-- name: ListOperasis :many
SELECT
    id, name, created_at, updated_at
FROM
    operasis
ORDER BY created_at DESC
`

func (q *Queries) ListOperasis(ctx context.Context) ([]Operasi, error) {
	rows, err := q.db.Query(ctx, listOperasis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Operasi{}
	for rows.Next() {
		var i Operasi
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginateOperasis = `-- name: PaginateOperasis :many
SELECT
    id, name,  created_at, updated_at
FROM
    operasis
ORDER BY created_at DESC
LIMIT $2 OFFSET $1
`

type PaginateOperasisParams struct {
	PageNumber int64 `json:"page_number"`
	PageSize   int64 `json:"page_size"`
}

func (q *Queries) PaginateOperasis(ctx context.Context, arg PaginateOperasisParams) ([]Operasi, error) {
	rows, err := q.db.Query(ctx, paginateOperasis, arg.PageNumber, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Operasi{}
	for rows.Next() {
		var i Operasi
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginateSearchOperasis = `-- name: PaginateSearchOperasis :many
SELECT
    id, name, created_at, updated_at
FROM
    operasis
WHERE name ILIKE '%' || $1::text || '%'
ORDER BY
    created_at DESC
LIMIT $3 OFFSET $2
`

type PaginateSearchOperasisParams struct {
	Name       string `json:"name"`
	PageNumber int64  `json:"page_number"`
	PageSize   int64  `json:"page_size"`
}

func (q *Queries) PaginateSearchOperasis(ctx context.Context, arg PaginateSearchOperasisParams) ([]Operasi, error) {
	rows, err := q.db.Query(ctx, paginateSearchOperasis, arg.Name, arg.PageNumber, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Operasi{}
	for rows.Next() {
		var i Operasi
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOperasi = `-- name: UpdateOperasi :one
UPDATE operasis
SET
    name = $1,
    updated_at = NOW()
WHERE
    id = $2
RETURNING id, name, created_at, updated_at
`

type UpdateOperasiParams struct {
	Name pgtype.Text `json:"name"`
	ID   uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateOperasi(ctx context.Context, arg UpdateOperasiParams) (Operasi, error) {
	row := q.db.QueryRow(ctx, updateOperasi, arg.Name, arg.ID)
	var i Operasi
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
