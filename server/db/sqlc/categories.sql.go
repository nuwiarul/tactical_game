// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: categories.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countCategories = `-- name: CountCategories :one
SELECT count(*)
FROM categories
LIMIT 1
`

func (q *Queries) CountCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSearchCategories = `-- name: CountSearchCategories :one
SELECT count(*)
FROM categories
WHERE name ILIKE '%' || $1::text || '%'
LIMIT 1
`

func (q *Queries) CountSearchCategories(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRow(ctx, countSearchCategories, name)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (name, icon)
VALUES ($1, $2)
RETURNING id, name, icon, created_at, updated_at
`

type CreateCategoryParams struct {
	Name pgtype.Text `json:"name"`
	Icon pgtype.Text `json:"icon"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.Name, arg.Icon)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategories = `-- name: DeleteCategories :exec
DELETE FROM categories
WHERE id=$1
`

func (q *Queries) DeleteCategories(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategories, id)
	return err
}

const getCategories = `-- name: GetCategories :one
SELECT
    id, name, icon, created_at, updated_at
FROM
    categories
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetCategories(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, getCategories, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT
    id, name, icon, created_at, updated_at
FROM
    categories
ORDER BY created_at DESC
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginateCategories = `-- name: PaginateCategories :many
SELECT
    id, name, icon, created_at, updated_at
FROM
    categories
ORDER BY created_at DESC
LIMIT $2 OFFSET $1
`

type PaginateCategoriesParams struct {
	PageNumber int64 `json:"page_number"`
	PageSize   int64 `json:"page_size"`
}

func (q *Queries) PaginateCategories(ctx context.Context, arg PaginateCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, paginateCategories, arg.PageNumber, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const paginateSearchCategories = `-- name: PaginateSearchCategories :many
SELECT
    id, name, icon, created_at, updated_at
FROM
    categories
WHERE name ILIKE '%' || $1::text || '%'
ORDER BY
    created_at DESC
LIMIT $3 OFFSET $2
`

type PaginateSearchCategoriesParams struct {
	Name       string `json:"name"`
	PageNumber int64  `json:"page_number"`
	PageSize   int64  `json:"page_size"`
}

func (q *Queries) PaginateSearchCategories(ctx context.Context, arg PaginateSearchCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, paginateSearchCategories, arg.Name, arg.PageNumber, arg.PageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET
    name = $1,
    icon = COALESCE($2, icon),
    updated_at = NOW()
WHERE
    id = $3
RETURNING id, name, icon, created_at, updated_at
`

type UpdateCategoryParams struct {
	Name pgtype.Text `json:"name"`
	Icon pgtype.Text `json:"icon"`
	ID   uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.Name, arg.Icon, arg.ID)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
