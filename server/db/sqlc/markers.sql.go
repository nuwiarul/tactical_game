// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: markers.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMarker = `-- name: CreateMarker :one
INSERT INTO markers (name, operasi_id, skenario_id, unit_id,  jumlah, rot_x, rot_y, rot_z, pos_x, pos_y, keterangan, kategori)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, operasi_id, skenario_id, unit_id, name, kategori, jumlah, rot_x, rot_y, rot_z, pos_x, pos_y, keterangan, created_at, updated_at, scale
`

type CreateMarkerParams struct {
	Name       pgtype.Text   `json:"name"`
	OperasiID  pgtype.UUID   `json:"operasi_id"`
	SkenarioID pgtype.UUID   `json:"skenario_id"`
	UnitID     pgtype.UUID   `json:"unit_id"`
	Jumlah     pgtype.Int4   `json:"jumlah"`
	RotX       pgtype.Float8 `json:"rot_x"`
	RotY       pgtype.Float8 `json:"rot_y"`
	RotZ       pgtype.Float8 `json:"rot_z"`
	PosX       pgtype.Float8 `json:"pos_x"`
	PosY       pgtype.Float8 `json:"pos_y"`
	Keterangan pgtype.Text   `json:"keterangan"`
	Kategori   pgtype.Text   `json:"kategori"`
}

func (q *Queries) CreateMarker(ctx context.Context, arg CreateMarkerParams) (Marker, error) {
	row := q.db.QueryRow(ctx, createMarker,
		arg.Name,
		arg.OperasiID,
		arg.SkenarioID,
		arg.UnitID,
		arg.Jumlah,
		arg.RotX,
		arg.RotY,
		arg.RotZ,
		arg.PosX,
		arg.PosY,
		arg.Keterangan,
		arg.Kategori,
	)
	var i Marker
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.UnitID,
		&i.Name,
		&i.Kategori,
		&i.Jumlah,
		&i.RotX,
		&i.RotY,
		&i.RotZ,
		&i.PosX,
		&i.PosY,
		&i.Keterangan,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Scale,
	)
	return i, err
}

const deleteMarkers = `-- name: DeleteMarkers :exec
DELETE FROM markers
WHERE id=$1
`

func (q *Queries) DeleteMarkers(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMarkers, id)
	return err
}

const getMarker = `-- name: GetMarker :one
SELECT
    id, name, operasi_id, skenario_id, unit_id,  jumlah, rot_x, rot_y, rot_z, pos_x, pos_y, keterangan, kategori, scale,  created_at, updated_at
FROM
    markers
WHERE id = $1
`

type GetMarkerRow struct {
	ID         uuid.UUID        `json:"id"`
	Name       pgtype.Text      `json:"name"`
	OperasiID  pgtype.UUID      `json:"operasi_id"`
	SkenarioID pgtype.UUID      `json:"skenario_id"`
	UnitID     pgtype.UUID      `json:"unit_id"`
	Jumlah     pgtype.Int4      `json:"jumlah"`
	RotX       pgtype.Float8    `json:"rot_x"`
	RotY       pgtype.Float8    `json:"rot_y"`
	RotZ       pgtype.Float8    `json:"rot_z"`
	PosX       pgtype.Float8    `json:"pos_x"`
	PosY       pgtype.Float8    `json:"pos_y"`
	Keterangan pgtype.Text      `json:"keterangan"`
	Kategori   pgtype.Text      `json:"kategori"`
	Scale      pgtype.Float8    `json:"scale"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetMarker(ctx context.Context, id uuid.UUID) (GetMarkerRow, error) {
	row := q.db.QueryRow(ctx, getMarker, id)
	var i GetMarkerRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OperasiID,
		&i.SkenarioID,
		&i.UnitID,
		&i.Jumlah,
		&i.RotX,
		&i.RotY,
		&i.RotZ,
		&i.PosX,
		&i.PosY,
		&i.Keterangan,
		&i.Kategori,
		&i.Scale,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMarkersBySkenario = `-- name: ListMarkersBySkenario :many
SELECT
    id, name, operasi_id, skenario_id, unit_id,  jumlah, rot_x, rot_y, rot_z, pos_x, pos_y, keterangan, kategori, scale,  created_at, updated_at
FROM
    markers
WHERE skenario_id = $1
ORDER BY created_at DESC
`

type ListMarkersBySkenarioRow struct {
	ID         uuid.UUID        `json:"id"`
	Name       pgtype.Text      `json:"name"`
	OperasiID  pgtype.UUID      `json:"operasi_id"`
	SkenarioID pgtype.UUID      `json:"skenario_id"`
	UnitID     pgtype.UUID      `json:"unit_id"`
	Jumlah     pgtype.Int4      `json:"jumlah"`
	RotX       pgtype.Float8    `json:"rot_x"`
	RotY       pgtype.Float8    `json:"rot_y"`
	RotZ       pgtype.Float8    `json:"rot_z"`
	PosX       pgtype.Float8    `json:"pos_x"`
	PosY       pgtype.Float8    `json:"pos_y"`
	Keterangan pgtype.Text      `json:"keterangan"`
	Kategori   pgtype.Text      `json:"kategori"`
	Scale      pgtype.Float8    `json:"scale"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) ListMarkersBySkenario(ctx context.Context, skenarioID pgtype.UUID) ([]ListMarkersBySkenarioRow, error) {
	rows, err := q.db.Query(ctx, listMarkersBySkenario, skenarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMarkersBySkenarioRow{}
	for rows.Next() {
		var i ListMarkersBySkenarioRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OperasiID,
			&i.SkenarioID,
			&i.UnitID,
			&i.Jumlah,
			&i.RotX,
			&i.RotY,
			&i.RotZ,
			&i.PosX,
			&i.PosY,
			&i.Keterangan,
			&i.Kategori,
			&i.Scale,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMarkerGeom = `-- name: UpdateMarkerGeom :one
UPDATE markers
SET
    pos_x = $1,
    pos_y = $2,
    rot_x = $3,
    rot_y = $4,
    rot_z = $5,
    updated_at = NOW()
WHERE
    id = $6
RETURNING id, operasi_id, skenario_id, unit_id, name, kategori, jumlah, rot_x, rot_y, rot_z, pos_x, pos_y, keterangan, created_at, updated_at, scale
`

type UpdateMarkerGeomParams struct {
	PosX pgtype.Float8 `json:"pos_x"`
	PosY pgtype.Float8 `json:"pos_y"`
	RotX pgtype.Float8 `json:"rot_x"`
	RotY pgtype.Float8 `json:"rot_y"`
	RotZ pgtype.Float8 `json:"rot_z"`
	ID   uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateMarkerGeom(ctx context.Context, arg UpdateMarkerGeomParams) (Marker, error) {
	row := q.db.QueryRow(ctx, updateMarkerGeom,
		arg.PosX,
		arg.PosY,
		arg.RotX,
		arg.RotY,
		arg.RotZ,
		arg.ID,
	)
	var i Marker
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.UnitID,
		&i.Name,
		&i.Kategori,
		&i.Jumlah,
		&i.RotX,
		&i.RotY,
		&i.RotZ,
		&i.PosX,
		&i.PosY,
		&i.Keterangan,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Scale,
	)
	return i, err
}

const updateMarkerName = `-- name: UpdateMarkerName :one
UPDATE markers
SET
    name = $1,
    jumlah = $2,
    keterangan = $3,
    updated_at = NOW()
WHERE
    id = $4
RETURNING id, operasi_id, skenario_id, unit_id, name, kategori, jumlah, rot_x, rot_y, rot_z, pos_x, pos_y, keterangan, created_at, updated_at, scale
`

type UpdateMarkerNameParams struct {
	Name       pgtype.Text `json:"name"`
	Jumlah     pgtype.Int4 `json:"jumlah"`
	Keterangan pgtype.Text `json:"keterangan"`
	ID         uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateMarkerName(ctx context.Context, arg UpdateMarkerNameParams) (Marker, error) {
	row := q.db.QueryRow(ctx, updateMarkerName,
		arg.Name,
		arg.Jumlah,
		arg.Keterangan,
		arg.ID,
	)
	var i Marker
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.UnitID,
		&i.Name,
		&i.Kategori,
		&i.Jumlah,
		&i.RotX,
		&i.RotY,
		&i.RotZ,
		&i.PosX,
		&i.PosY,
		&i.Keterangan,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Scale,
	)
	return i, err
}

const updateMarkerRotasi = `-- name: UpdateMarkerRotasi :one
UPDATE markers
SET
    rot_z = $1,
    updated_at = NOW()
WHERE
    id = $2
RETURNING id, operasi_id, skenario_id, unit_id, name, kategori, jumlah, rot_x, rot_y, rot_z, pos_x, pos_y, keterangan, created_at, updated_at, scale
`

type UpdateMarkerRotasiParams struct {
	Rotasi pgtype.Float8 `json:"rotasi"`
	ID     uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateMarkerRotasi(ctx context.Context, arg UpdateMarkerRotasiParams) (Marker, error) {
	row := q.db.QueryRow(ctx, updateMarkerRotasi, arg.Rotasi, arg.ID)
	var i Marker
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.UnitID,
		&i.Name,
		&i.Kategori,
		&i.Jumlah,
		&i.RotX,
		&i.RotY,
		&i.RotZ,
		&i.PosX,
		&i.PosY,
		&i.Keterangan,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Scale,
	)
	return i, err
}

const updateMarkerScale = `-- name: UpdateMarkerScale :one
UPDATE markers
SET
    scale = $1,
    updated_at = NOW()
WHERE
    id = $2
RETURNING id, operasi_id, skenario_id, unit_id, name, kategori, jumlah, rot_x, rot_y, rot_z, pos_x, pos_y, keterangan, created_at, updated_at, scale
`

type UpdateMarkerScaleParams struct {
	Scale pgtype.Float8 `json:"scale"`
	ID    uuid.UUID     `json:"id"`
}

func (q *Queries) UpdateMarkerScale(ctx context.Context, arg UpdateMarkerScaleParams) (Marker, error) {
	row := q.db.QueryRow(ctx, updateMarkerScale, arg.Scale, arg.ID)
	var i Marker
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.UnitID,
		&i.Name,
		&i.Kategori,
		&i.Jumlah,
		&i.RotX,
		&i.RotY,
		&i.RotZ,
		&i.PosX,
		&i.PosY,
		&i.Keterangan,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Scale,
	)
	return i, err
}
