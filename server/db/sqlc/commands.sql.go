// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: commands.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommand = `-- name: CreateCommand :one
INSERT INTO commands (operasi_id, skenario_id, marker_id,  command, data)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, operasi_id, skenario_id, marker_id, command, data, created_at, updated_at
`

type CreateCommandParams struct {
	OperasiID  pgtype.UUID `json:"operasi_id"`
	SkenarioID pgtype.UUID `json:"skenario_id"`
	MarkerID   pgtype.UUID `json:"marker_id"`
	Command    pgtype.Text `json:"command"`
	Data       pgtype.Text `json:"data"`
}

func (q *Queries) CreateCommand(ctx context.Context, arg CreateCommandParams) (Command, error) {
	row := q.db.QueryRow(ctx, createCommand,
		arg.OperasiID,
		arg.SkenarioID,
		arg.MarkerID,
		arg.Command,
		arg.Data,
	)
	var i Command
	err := row.Scan(
		&i.ID,
		&i.OperasiID,
		&i.SkenarioID,
		&i.MarkerID,
		&i.Command,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCommandsBySkenario = `-- name: ListCommandsBySkenario :many
SELECT
    id, operasi_id, skenario_id, marker_id,  command, data,  created_at, updated_at
FROM
    commands
WHERE skenario_id = $1
ORDER BY id ASC
`

func (q *Queries) ListCommandsBySkenario(ctx context.Context, skenarioID pgtype.UUID) ([]Command, error) {
	rows, err := q.db.Query(ctx, listCommandsBySkenario, skenarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Command{}
	for rows.Next() {
		var i Command
		if err := rows.Scan(
			&i.ID,
			&i.OperasiID,
			&i.SkenarioID,
			&i.MarkerID,
			&i.Command,
			&i.Data,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
